<?xml version="1.0"?>
<exam>


    <question id="42">
        <module>Business Processes</module>
        <qtext>You are asked to define a new business process, what steps do you perform?</qtext>
        <qnotes>There are 3 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">Define the process in XML format.</choice>
            <choice id="2">Define actions as new item types.</choice>
            <choice id="3">Define the actions as spring beans.</choice>
            <choice id="4">Implement actions in Java code.</choice>
            <choice id="5">Define the process in BPMN format.</choice>
        </choices>
        <answer>1,3,4</answer>
    </question>

    <question id="43">
        <module>Smart Edit</module>
        <qtext>When defining a merchandising carousel in Smart Edit, based on Intelligent Selling Services, what should you pay attention to?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">A product mix can be used in multiple strategies.</choice>
            <choice id="2">A merchandising carousel can reference one or more product mixes.</choice>
            <choice id="3">A strategy can reference one or more product mixers.</choice>
            <choice id="4">A merchandising carousel can use one or more strategies.</choice>
        </choices>
        <answer>1,3</answer>
    </question>

    <question id="45">
        <module>Asynchronous Events</module>
        <qtext>How can you create asynchronous events in the SAP Commerce Cloud platform?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">Change the platformClusterEventSender Spring bean configuration.</choice>
            <choice id="2">Implement the TransactionAwareEvent interface.</choice>
            <choice id="3">Implement the Cluster Aware Event interface.</choice>
            <choice id="4">Extend the Abstract Event class.</choice>
        </choices>
        <answer>1,3</answer>
    </question>

    <question id="46">
        <module>Cart Service</module>
        <qtext>Which of the following are best practices for adding a new parameter to an existing method of Commerce Cart service?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">Overload the existing method of Commerce Cart Service by adding the new parameter.</choice>
            <choice id="2">Add a new property to Commerce Cart Parameter in a beans.xml file.</choice>
            <choice id="3">Extend the default implementation of the method to handle the new parameter.</choice>
            <choice id="4">Extend the default strategy, which is called by the method, to handle the new parameter.</choice>
        </choices>
        <answer>1,4</answer>
    </question>

    <question id="47">
        <module>Widgets</module>
        <qtext>Which of the following can you configure in a widget definition (definition xml) file?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">The default values for widget settings</choice>
            <choice id="2">The available virtual sockets</choice>
            <choice id="3">The business logic of the widget with a bean shell script</choice>
            <choice id="4">The view file</choice>
        </choices>
        <answer>1,4</answer>
    </question>

    <question id="49">
        <module>Enumerations</module>
        <qtext>Where are enumerations stored?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">Dynamic enumerations are stored in memory only.</choice>
            <choice id="2">Dynamic enumerations are stored in the database.</choice>
            <choice id="3">Non-dynamic enumerations are stored as enumeration classes.</choice>
            <choice id="4">Non-dynamic enumerations are stored as HybrisEnum'value objects.</choice>
        </choices>
        <answer>2,3</answer>
    </question>

    <question id="50">
        <module>Cloud Portal</module>
        <qtext>What does the Cloud Portal application enable you to do?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>
        <choices>
            <choice id="1">Set up and deploy SAP Commerce Cloud in the public cloud.</choice>
            <choice id="2">Create and configure endpoints that are tied to configured aspects.</choice>
            <choice id="3">Generate new passwords for admin and anonymous users.</choice>
            <choice id="4">Review the page load times of your environments.</choice>
        </choices>
        <answer>1,2</answer>
    </question>

    <question id="51">
        <module>DTOs and Populators</module>
        <qtext>In an extension named myext, you defined Pump, a subtype of the Product item type with a property named efficiency. You have also extended the product DTO bean to have an efficiency property. To copy the efficiency property to the productDTO, what do you need to do?</qtext>
        <qnotes>There are 2 correct answers to this question.</qnotes>

        <choices>
            <choice id="1">Create a PumpPopulator class that extends ProductPopulator and, if necessary, copies the efficiency property from the Pump item to the productDTO bean. In myext-spring.xml, redefine the productPopulator alias to point to an instance of PumpPopulator.</choice>

            <choice id="2">Write a Pump Attribute Populator class that copies the efficiency property from the item to the DTO only if its method is passed an instance of Pump Model. Define a 	bean for this new class in myext-spring.xml, and use a modify Populator List bean to add it to the product Converter's list of populators.</choice>

            <choice id="3">Make sure the definition of the Pump item type defines the efficiency attribute with the persistence type property. When you run ant all, the product Converter class 	that's generated in bootstrap/gensrc will copy the efficiency property to the productDTO.</choice>

            <choice id="4">Write a PumpProductConverter class that extends AbstractPopulatingConverter, and copy the efficiency property from the Pump item to the productDTO bean if the item 	is an instance of Pump. Use this class to create a pumpProductConverter bean in myext-spring.xml.</choice>
        </choices>

        <answer>1,2</answer>
    </question>



</exam>